# mysql-with-storage.yaml
# Example: MySQL database with persistent storage

---
# PVC for MySQL data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  labels:
    app: mysql
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi  # 2GB for database

---
# MySQL Pod with persistent storage
apiVersion: v1
kind: Pod
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  containers:
  - name: mysql
    image: mysql:8.0
    
    # Environment variables for MySQL
    env:
    - name: MYSQL_ROOT_PASSWORD
      value: "password123"  # WARNING: Use Secrets in production!
    - name: MYSQL_DATABASE
      value: "testdb"
    - name: MYSQL_USER
      value: "appuser"
    - name: MYSQL_PASSWORD
      value: "apppass123"
    
    ports:
    - containerPort: 3306
      name: mysql
    
    # Mount PVC to MySQL data directory
    volumeMounts:
    - name: mysql-storage
      mountPath: /var/lib/mysql  # MySQL stores all data here
    
    # Resource limits
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"
  
  volumes:
  - name: mysql-storage
    persistentVolumeClaim:
      claimName: mysql-pvc

# Usage:
# kubectl apply -f mysql-with-storage.yaml
# kubectl wait --for=condition=ready pod/mysql --timeout=60s
#
# Create data:
# kubectl exec -it mysql -- mysql -uroot -ppassword123 testdb -e "
#   CREATE TABLE users (id INT, name VARCHAR(50));
#   INSERT INTO users VALUES (1, 'Alice'), (2, 'Bob');
#   SELECT * FROM users;
# "
#
# Delete and recreate pod:
# kubectl delete pod mysql
# kubectl apply -f mysql-with-storage.yaml
# kubectl wait --for=condition=ready pod/mysql --timeout=60s
#
# Verify data persists:
# kubectl exec -it mysql -- mysql -uroot -ppassword123 testdb -e "SELECT * FROM users;"
#
# Cleanup:
# kubectl delete pod mysql
# kubectl delete pvc mysql-pvc
